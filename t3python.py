# -*- coding: utf-8 -*-
"""T3Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n0Xodi4-YzkJPmNm3iEcvIeyQ-KDhncS
"""

pip install requests

import requests
import json
from collections import defaultdict
import pandas as pd
import calendar
import matplotlib.pyplot as plt
from openpyxl import Workbook

api_key = 'CTI6XGPX2DW671SO'
function = 'TIME_SERIES_MONTHLY'
symbol = 'MSFT'
outputsize = 'full'

url = f'https://www.alphavantage.co/query?function={function}&symbol={symbol}&outputsize={outputsize}&apikey={api_key}'
response = requests.get(url)
data = response.json()

time_series = data['Monthly Time Series']

"""# exemplo mostrando o fechamento dos ultimos 5 meses e seu valor"""

time_series = data['Monthly Time Series']

# Obter as últimas 5 entradas (meses)
last_5_months = list(time_series.items())[:5]

for date, values in last_5_months:
    close_price = values['4. close']
    print(f'Mês: {date}, Preço de Fechamento: {close_price}')

"""# criação de uma tabela informando o fehcamento dos anos separados por meses e seu total"""

time_series = data['Monthly Time Series']
monthly_summary = defaultdict(list)

# Agrupar os dados por mês e calcular o preço de fechamento médio
for date, values in time_series.items():
    month = int(date[5:7])  # Extrair o mês da data como número inteiro
    year = int(date[:4])  # Extrair o ano da data como número inteiro
    close_price = float(values['4. close'])
    monthly_summary[year].append((month, close_price))

# Criar DataFrame com o resumo mensal
summary_data = {'Ano': [], 'Janeiro': [], 'Fevereiro': [], 'Março': [], 'Abril': [], 'Maio': [], 'Junho': [], 'Julho': [], 'Agosto': [], 'Setembro': [], 'Outubro': [], 'Novembro': [], 'Dezembro': []}

for year, prices in monthly_summary.items():
    monthly_prices = {month: 0.0 for month in range(1, 13)}
    for month, price in prices:
        monthly_prices[month] = price
    summary_data['Ano'].append(year)
    summary_data['Janeiro'].append(monthly_prices[1])
    summary_data['Fevereiro'].append(monthly_prices[2])
    summary_data['Março'].append(monthly_prices[3])
    summary_data['Abril'].append(monthly_prices[4])
    summary_data['Maio'].append(monthly_prices[5])
    summary_data['Junho'].append(monthly_prices[6])
    summary_data['Julho'].append(monthly_prices[7])
    summary_data['Agosto'].append(monthly_prices[8])
    summary_data['Setembro'].append(monthly_prices[9])
    summary_data['Outubro'].append(monthly_prices[10])
    summary_data['Novembro'].append(monthly_prices[11])
    summary_data['Dezembro'].append(monthly_prices[12])

summary_df = pd.DataFrame(summary_data)

# Salvar DataFrame em um arquivo Excel
excel_file = 'faturamento_mensal.xlsx'
summary_df.to_excel(excel_file, index=False)

# Exibir conteúdo do arquivo Excel no Google Colab
from IPython.display import display

display(pd.read_excel(excel_file))

"""#criação do gráfico"""

# Configurar gráficos separados por ano (invertendo a ordem)
fig, axs = plt.subplots(len(summary_df), 1, figsize=(8, 4*len(summary_df)), sharex=True, gridspec_kw={'hspace': 0.4})

# Plotar gráficos separados (invertendo a ordem)
for i, row in enumerate(summary_df[::-1].iterrows()):
    year = row[1]['Ano']
    monthly_revenue = row[1].drop('Ano').values
    months = range(1, 13)
    month_labels = [calendar.month_abbr[month] for month in months]  # Usar a abreviação do mês
    axs[i].plot(months, monthly_revenue, marker='o', linestyle='-')
    axs[i].set_ylabel('Faturamento (em milhões)')
    axs[i].set_xticks(months)
    axs[i].set_xticklabels(month_labels, rotation=45)  # Rotação de 45 graus para os rótulos
    axs[i].set_xlabel('Mês')
    axs[i].set_title(f'Faturamento - {year}')  # Título com o ano do faturamento

plt.tight_layout()
plt.show()

"""#Gráfico sobre a variação de preços da microsoft com o tempo"""

# Criar um DataFrame a partir dos dados
df = pd.DataFrame(time_series).T

# Converter os valores para numéricos
df['4. close'] = pd.to_numeric(df['4. close'])

# Calcular estatísticas descritivas básicas
statistics = df['4. close'].describe()

# Imprimir as estatísticas descritivas
print(statistics)

# Plotar o gráfico de linha
ax = df['4. close'].plot(figsize=(10, 6))
plt.title('Preços das Ações ao longo do tempo')
plt.xlabel('Data')
plt.ylabel('Preço de Fechamento')
plt.grid(True)

# Espelhar o gráfico invertendo o eixo x
ax.invert_xaxis()

plt.show()

"""# Explcação do significado das abreviações

"""

statistics = df['4. close'].describe()

# Imprimir as estatísticas descritivas com explicação
for stat, value in statistics.iteritems():
    explanation = {
        'count': 'Número total de observações.',
        'mean': 'Média dos valores.',
        'std': 'Desvio padrão, que mede a dispersão dos valores em relação à média.',
        'min': 'Valor mínimo observado.',
        '25%': 'Primeiro quartil, ou valor abaixo do qual 25% dos dados estão localizados.',
        '50%': 'Segundo quartil, também conhecido como mediana, é o valor abaixo do qual 50% dos dados estão localizados.',
        '75%': 'Terceiro quartil, valor abaixo do qual 75% dos dados estão localizados.',
        'max': 'Valor máximo observado.'
    }
    print(f'{stat}: {value}\n{explanation[stat]}\n')

"""## 2019 - 2021
Windows 10: A Microsoft continuou a lançar atualizações e melhorias para o sistema operacional Windows 10, trazendo novos recursos, melhorias de desempenho e segurança.

Microsoft 365: A suíte de produtividade Microsoft 365 foi lançada, oferecendo uma combinação de aplicativos como Word, Excel, PowerPoint, Outlook, entre outros, juntamente com recursos de colaboração e armazenamento em nuvem.

Microsoft Azure: A plataforma de computação em nuvem da Microsoft, o Azure, recebeu atualizações e expansões, oferecendo mais recursos e serviços para empresas e desenvolvedores.

Microsoft Surface: A linha de dispositivos Surface, incluindo laptops, tablets e dispositivos híbridos, recebeu atualizações e novos modelos lançados, oferecendo opções avançadas para produtividade e criatividade.

Xbox Series X/S: A Microsoft lançou a nova geração de consoles de jogos Xbox, com o Xbox Series X e o Xbox Series S, oferecendo melhorias de desempenho, gráficos avançados e recursos de jogabilidade aprimorados.

# Calculando a taxa de Votatilidade
Volatilidade - Medida da variação dos preços de um ativo financeiro ao longo do tempo.

- Alta volatilidade: Preços das ações sujeitos a flutuações significativas em curtos períodos de tempo. Pode ser causada por eventos econômicos, anúncios corporativos ou mudanças no mercado.

- Baixa volatilidade: Preços das ações com variações menores ao longo do tempo. Indica estabilidade e menor risco.

- Importante para investidores e traders: Indica o grau de risco associado a um ativo financeiro. Ativos com alta volatilidade são mais arriscados, enquanto ativos com baixa volatilidade são considerados mais estáveis.

- Medida comum: Desvio padrão dos retornos diários ou mensais. Quantifica a dispersão dos retornos em relação à média.

- Consideração na tomada de decisões financeiras: A volatilidade é um fator importante a ser considerado ao avaliar investimentos e gerenciar riscos.
"""

# API parameters
function = 'TIME_SERIES_DAILY_ADJUSTED'
symbol = 'MSFT'
outputsize = 'full'  # Para obter o conjunto completo de dados históricos
datatype = 'json'  # Formato de saída JSON

# API request
url = f'https://www.alphavantage.co/query?function={function}&symbol={symbol}&outputsize={outputsize}&datatype={datatype}&apikey={api_key}'
response = requests.get(url)
data = response.json()

# Extract daily adjusted closing prices
time_series = data['Time Series (Daily)']

# Prepare lists to store data
dates = []
closing_prices = []

# Extract date and closing price for each day
for date, values in time_series.items():
    dates.append(date)
    closing_prices.append(float(values['5. adjusted close']))

# Create a DataFrame from the data
df = pd.DataFrame({'Date': dates, 'Closing Price': closing_prices})

# Calculate daily percentage change
df['Daily Return'] = df['Closing Price'].pct_change()

# Set threshold for volatility
volatility_threshold = 0.05

# Filter periods of high volatility
high_volatility_periods = df[df['Daily Return'].abs() > volatility_threshold]

# Create a table with high volatility periods
table = high_volatility_periods[['Date', 'Daily Return']].reset_index(drop=True)
table.columns = ['Data', 'Variação Percentual Diária']

# Save table to Excel file
output_file = 'high_volatility_periods.xlsx'
with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    table.to_excel(writer, sheet_name='Períodos de Alta Volatilidade', index=False)

print(f"Tabela criada e salva em '{output_file}'.")

"""--------------------------------------------------------------
Análise da Microsoft - Principais Descobertas e Conclusões
--------------------------------------------------------------

1. Desempenho das ações:
   - O preço das ações da Microsoft apresentou um desempenho geral positivo ao longo do período de 2000 a 2023, com alguns períodos de maior volatilidade. Houve um crescimento notável entre 2019 e 2021, seguido de uma queda em 2021.

2. Volatilidade do mercado:
   - Durante o período analisado, o mercado de ações como um todo enfrentou períodos de alta volatilidade, influenciados por eventos econômicos, geopolíticos e setoriais. A Microsoft não foi imune a essas flutuações, refletindo em variações no preço de suas ações.

3. Lançamentos de produtos e investimentos:
   - A Microsoft realizou uma série de lançamentos de produtos e investimentos estratégicos ao longo dos anos, buscando inovação e expansão em diversas áreas, como software, serviços em nuvem e hardware. Esses lançamentos e investimentos desempenharam um papel importante no desempenho da empresa.

4. Liderança e estratégia:
   - Sob a liderança de CEOs como Steve Ballmer e Satya Nadella, a Microsoft adotou diferentes abordagens estratégicas, buscando se adaptar às mudanças tecnológicas e às demandas do mercado. A mudança de foco para serviços em nuvem e uma abordagem centrada no cliente foram fatores-chave para o sucesso da empresa.

Pontos fortes do desempenho da Microsoft:
- Portfólio diversificado de produtos e serviços bem-sucedidos.
- Liderança estratégica e capacidade de adaptação às mudanças do mercado.
- Investimentos contínuos em pesquisa e desenvolvimento.

Pontos fracos do desempenho da Microsoft:
- Sensibilidade a fatores externos, como volatilidade do mercado e condições macroeconômicas.
- Dependência de certos segmentos de mercado, como software e serviços corporativos.

Fatores que influenciaram os resultados:
- Condições macroeconômicas e volatilidade do mercado de ações.
- Competição acirrada no setor de tecnologia.
- Mudanças nas preferências dos consumidores e demanda por produtos e serviços.

--------------------------------------------------------------

"""